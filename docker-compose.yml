services:
# target1 and target2: recieve events and write outputs to mounted volumes
# splitter: distributes events between target1 and target2
# agent: generates input data and passes it through the splitter
# tests: runs pytest againt the output generated by target1 and target2
  target1:
    build: .
    command: ["node", "app.js", "target/"]
    volumes: [./output/target1:/usr/src/app/output]
    networks: [myapp]

  target2:
    build: .
    command: ["node", "app.js", "target2/"]
    volumes: [./output/target2:/usr/src/app/output]
    networks: [myapp]

  splitter:
    build: .
    command: ["node", "app.js", "splitter/"]
    depends_on: [target1, target2]
    networks: [myapp]

  agent:
    build: .
    command: ["node", "app.js", "agent/"]
    depends_on: [splitter]
    networks: [myapp]
  
  tests:
    build: 
      context: .
      dockerfile: Dockerfile.test
    volumes: ["./output:/tests/output"]
    depends_on: [agent]
    networks: [myapp]


networks:
  myapp:
    driver: bridge